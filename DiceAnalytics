//Filename DiceAnalytics.cs
//Written by Miranda Berry
//Written on Monday 3 February 2025
//Language: C#

using System;
using static System.Console;
class DiceAnalytics
{
    static void Main()
    {
        /* Instructor Comments:  Good work on the commenting!  Keep this up!  */

        //Declare an integer array to hold the tally of the rolls. 
        int[] rollsTally;

        //Reserve memory locations -- sum of the 2 rolls can be from 2 to 12.
        rollsTally = new int[11];

        /*Use the built-in Random class to create a method that generatse a random number between 1 and 6
          of the die rolls*/
        Random randomGenerator = new Random();

        //The ".Next" method generates a random whole number.
        //The second number in the range is exclusive (not included).
        int randomNum = randomGenerator.Next(1, 7);

        //Declare loop variables here so they can be used outside of loop if necessary.
        int dieOneRoll;
        int dieTwoRoll;

        /*Using a for loop, iterate 36,000 times to make the two die rolls, sum the results.
        /*Initialize x to the default value of 0, and as long as it remains under 36000, increment by 1
          after each iteration.*/
        /*By subtracting 2 from the sum and then incrementing by 1, you are adding a tally to the correct
          array element/index.*/
        for (int x=0; x < 36000; ++x)
        {
            dieOneRoll = randomGenerator.Next(1, 7);
            dieTwoRoll = randomGenerator.Next(1, 7);
            rollsTally[(dieOneRoll + dieTwoRoll) - 2]++;
        }

        //Write headers with spaces inbetween so that they will print as visually appealling columns.

        /* Instructor Comments:  Based on your comment in the submission about tabs, I will accept what you did 
         * below, but tabs is sometimes easier.  Using "escape characters" in the string, you can add a \t in the code
         * to get the tab.  See what I have added below.  \n*/
        WriteLine("Roll\t\tCount");

        //Using another for loop, print rolls counts until x is greater than the number of array elements.
        /*Utilize "Alignment and Field Size" from chapter 2 to line up results into columns (all possible
          rolls & how many times roll combo was achieved).*/
        for (int x=0; x < rollsTally.Length; x++)
        {
            WriteLine("{0, -8}{1,-8}", (x + 2), rollsTally[x]);
        }

        //Use the GetUpperBounds() method. Write an empty line for organization.

        /* Instructor Comments: The point of this was to use it in the loop above. \n*/ 
        WriteLine("");
        WriteLine("The upper bound is " + rollsTally.GetUpperBound(0) + ".");

        //Pause for user to review results.
        WriteLine("");
        Write("Press any key to continue...");
        ReadKey();
    }
}
